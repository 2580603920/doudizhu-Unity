// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SoketDoudizhuProtocol.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SoketDoudizhuProtocol {

  /// <summary>Holder for reflection information generated from SoketDoudizhuProtocol.proto</summary>
  public static partial class SoketDoudizhuProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for SoketDoudizhuProtocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SoketDoudizhuProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtTb2tldERvdWRpemh1UHJvdG9jb2wucHJvdG8SFVNva2V0RG91ZGl6aHVQ",
            "cm90b2NvbCIvCglMb2dpblBhY2sSEAoIdXNlcm5hbWUYASABKAkSEAoIcGFz",
            "c3dvcmQYAiABKAkiKwoFUG9rZXISDgoGd2VpZ2h0GAEgASgFEhIKCnBva2Vy",
            "Y29sb3IYAiABKAUijgEKClBsYXllckluZm8SEAoIdXNlcm5hbWUYASABKAkS",
            "DAoEY29pbhgCIAEoCRIOCgZzdGF0dXMYAyABKAUSKwoFcG9rZXIYBCADKAsy",
            "HC5Tb2tldERvdWRpemh1UHJvdG9jb2wuUG9rZXISEwoLY3VycG9rZXJudW0Y",
            "BSABKAUSDgoGcm9vbWlkGAYgASgJImcKDlNlbmRQb2tlcnNJbmZvEisKBXBv",
            "a2VyGAEgAygLMhwuU29rZXREb3VkaXpodVByb3RvY29sLlBva2VyEhYKDnBv",
            "a2VyVHlwZVV0aWxzGAIgASgFEhAKCHVzZXJuYW1lGAMgASgJIpgBCghSb29t",
            "SW5mbxIQCghsYW5kbG9yZBgBIAEoCRIRCglwbGF5ZXJudW0YAiABKAUSEAoI",
            "cm9vbXRpbGUYAyABKAkSDgoGc3RhdHVzGAQgASgFEg4KBnJvb21pZBgFIAEo",
            "CRI1CgpwbGF5ZXJpbmZvGAYgAygLMiEuU29rZXREb3VkaXpodVByb3RvY29s",
            "LlBsYXllckluZm8iywEKCEdhbWVJbmZvEg4KBnN0YXR1cxgBIAEoBRITCgtj",
            "dXJ1c2VybmFtZRgCIAEoCRITCgtwbGF5ZXJ0aW1lcxgDIAEoBRINCgV0aW1l",
            "cxgEIAEoBRI1CgpwbGF5ZXJpbmZvGAYgAygLMiEuU29rZXREb3VkaXpodVBy",
            "b3RvY29sLlBsYXllckluZm8SDQoFZGl6aHUYByABKAkSMAoKZGl6aHVwb2tl",
            "chgIIAMoCzIcLlNva2V0RG91ZGl6aHVQcm90b2NvbC5Qb2tlciLCAwoITWFp",
            "blBhY2sSNwoLcmVxdWVzdGNvZGUYASABKA4yIi5Tb2tldERvdWRpemh1UHJv",
            "dG9jb2wuUmVxdWVzdENvZGUSNQoKYWN0aW9uY29kZRgCIAEoDjIhLlNva2V0",
            "RG91ZGl6aHVQcm90b2NvbC5BY3Rpb25Db2RlEjUKCnJldHVybmNvZGUYAyAB",
            "KA4yIS5Tb2tldERvdWRpemh1UHJvdG9jb2wuUmV0dXJuQ29kZRIzCglsb2dp",
            "bnBhY2sYBCABKAsyIC5Tb2tldERvdWRpemh1UHJvdG9jb2wuTG9naW5QYWNr",
            "EjEKCHJvb21pbmZvGAUgAygLMh8uU29rZXREb3VkaXpodVByb3RvY29sLlJv",
            "b21JbmZvEjUKCnBsYXllcmluZm8YBiADKAsyIS5Tb2tldERvdWRpemh1UHJv",
            "dG9jb2wuUGxheWVySW5mbxIxCghnYW1laW5mbxgHIAEoCzIfLlNva2V0RG91",
            "ZGl6aHVQcm90b2NvbC5HYW1lSW5mbxI9Cg5zZW5kcG9rZXJzaW5mbxgIIAMo",
            "CzIlLlNva2V0RG91ZGl6aHVQcm90b2NvbC5TZW5kUG9rZXJzSW5mbypGCgtS",
            "ZXF1ZXN0Q29kZRIPCgtSZXF1ZXN0Tm9uZRAAEggKBFVzZXIQARIICgRSb29t",
            "EAISCAoER2FtZRADEggKBENoYXQQBCrrAQoKQWN0aW9uQ29kZRIOCgpBY3Rp",
            "b25Ob25lEAASCQoFTG9naW4QARIMCghSZWdpc3RlchACEg8KC0dldFJvb21M",
            "aXN0EAMSDgoKQ3JlYXRlUm9vbRAEEgwKCEpvaW5Sb29tEAUSDAoIRXhpdFJv",
            "b20QBhIPCgtHZXRSb29tSW5mbxAHEgwKCFNlbmRUZXh0EAgSDQoJQ291bnRE",
            "b3duEAkSDQoJU3RhcnRHYW1lEAoSDQoJRGVhbFBva2VyEAsSDwoLR2V0R2Ft",
            "ZUluZm8QDBILCgdSb2JIb3N0EA0SDQoJU2VuZFBva2VyEA4qUwoKUmV0dXJu",
            "Q29kZRIOCgpSZXR1cm5Ob25lEAASCwoHU3VjY2VzcxABEggKBEZhaWwQAhIM",
            "CghSb29tRnVsbBADEhAKDFJvb21EaXNzb2x2ZRAEYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SoketDoudizhuProtocol.RequestCode), typeof(global::SoketDoudizhuProtocol.ActionCode), typeof(global::SoketDoudizhuProtocol.ReturnCode), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SoketDoudizhuProtocol.LoginPack), global::SoketDoudizhuProtocol.LoginPack.Parser, new[]{ "Username", "Password" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SoketDoudizhuProtocol.Poker), global::SoketDoudizhuProtocol.Poker.Parser, new[]{ "Weight", "Pokercolor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SoketDoudizhuProtocol.PlayerInfo), global::SoketDoudizhuProtocol.PlayerInfo.Parser, new[]{ "Username", "Coin", "Status", "Poker", "Curpokernum", "Roomid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SoketDoudizhuProtocol.SendPokersInfo), global::SoketDoudizhuProtocol.SendPokersInfo.Parser, new[]{ "Poker", "PokerTypeUtils", "Username" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SoketDoudizhuProtocol.RoomInfo), global::SoketDoudizhuProtocol.RoomInfo.Parser, new[]{ "Landlord", "Playernum", "Roomtile", "Status", "Roomid", "Playerinfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SoketDoudizhuProtocol.GameInfo), global::SoketDoudizhuProtocol.GameInfo.Parser, new[]{ "Status", "Curusername", "Playertimes", "Times", "Playerinfo", "Dizhu", "Dizhupoker" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SoketDoudizhuProtocol.MainPack), global::SoketDoudizhuProtocol.MainPack.Parser, new[]{ "Requestcode", "Actioncode", "Returncode", "Loginpack", "Roominfo", "Playerinfo", "Gameinfo", "Sendpokersinfo" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum RequestCode {
    [pbr::OriginalName("RequestNone")] RequestNone = 0,
    /// <summary>
    ///用户
    /// </summary>
    [pbr::OriginalName("User")] User = 1,
    /// <summary>
    ///房间操作
    /// </summary>
    [pbr::OriginalName("Room")] Room = 2,
    /// <summary>
    ///游戏操作
    /// </summary>
    [pbr::OriginalName("Game")] Game = 3,
    /// <summary>
    ///聊天
    /// </summary>
    [pbr::OriginalName("Chat")] Chat = 4,
  }

  public enum ActionCode {
    [pbr::OriginalName("ActionNone")] ActionNone = 0,
    /// <summary>
    ///登入，只有登入成功才能进行Register后续的Action
    /// </summary>
    [pbr::OriginalName("Login")] Login = 1,
    /// <summary>
    ///注册
    /// </summary>
    [pbr::OriginalName("Register")] Register = 2,
    /// <summary>
    ///获取房间列表
    /// </summary>
    [pbr::OriginalName("GetRoomList")] GetRoomList = 3,
    /// <summary>
    ///创建房间
    /// </summary>
    [pbr::OriginalName("CreateRoom")] CreateRoom = 4,
    /// <summary>
    ///加入房间
    /// </summary>
    [pbr::OriginalName("JoinRoom")] JoinRoom = 5,
    /// <summary>
    ///退出房间
    /// </summary>
    [pbr::OriginalName("ExitRoom")] ExitRoom = 6,
    /// <summary>
    ///获取房间信息
    /// </summary>
    [pbr::OriginalName("GetRoomInfo")] GetRoomInfo = 7,
    /// <summary>
    ///发送文字
    /// </summary>
    [pbr::OriginalName("SendText")] SendText = 8,
    /// <summary>
    ///计时
    /// </summary>
    [pbr::OriginalName("CountDown")] CountDown = 9,
    /// <summary>
    ///开始游戏，房间内人数3个人且准备，只能由房主发起请求
    /// </summary>
    [pbr::OriginalName("StartGame")] StartGame = 10,
    /// <summary>
    ///发牌请求
    /// </summary>
    [pbr::OriginalName("DealPoker")] DealPoker = 11,
    /// <summary>
    ///获取游戏信息
    /// </summary>
    [pbr::OriginalName("GetGameInfo")] GetGameInfo = 12,
    /// <summary>
    ///抢地主，在每个玩家回合的限制时间内，三个玩家都能抢，首回合玩家如果没叫第二次，那么地主给后续第一个抢的
    /// </summary>
    [pbr::OriginalName("RobHost")] RobHost = 13,
    /// <summary>
    ///出牌，只有在抢完地主后并在当前操作回合，玩家才能出牌
    /// </summary>
    [pbr::OriginalName("SendPoker")] SendPoker = 14,
  }

  public enum ReturnCode {
    [pbr::OriginalName("ReturnNone")] ReturnNone = 0,
    [pbr::OriginalName("Success")] Success = 1,
    [pbr::OriginalName("Fail")] Fail = 2,
    /// <summary>
    ///房间满
    /// </summary>
    [pbr::OriginalName("RoomFull")] RoomFull = 3,
    /// <summary>
    ///房间解散
    /// </summary>
    [pbr::OriginalName("RoomDissolve")] RoomDissolve = 4,
  }

  #endregion

  #region Messages
  public sealed partial class LoginPack : pb::IMessage<LoginPack> {
    private static readonly pb::MessageParser<LoginPack> _parser = new pb::MessageParser<LoginPack>(() => new LoginPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SoketDoudizhuProtocol.SoketDoudizhuProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginPack(LoginPack other) : this() {
      username_ = other.username_;
      password_ = other.password_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginPack Clone() {
      return new LoginPack(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginPack other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Poker : pb::IMessage<Poker> {
    private static readonly pb::MessageParser<Poker> _parser = new pb::MessageParser<Poker>(() => new Poker());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Poker> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SoketDoudizhuProtocol.SoketDoudizhuProtocolReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Poker() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Poker(Poker other) : this() {
      weight_ = other.weight_;
      pokercolor_ = other.pokercolor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Poker Clone() {
      return new Poker(this);
    }

    /// <summary>Field number for the "weight" field.</summary>
    public const int WeightFieldNumber = 1;
    private int weight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    /// <summary>Field number for the "pokercolor" field.</summary>
    public const int PokercolorFieldNumber = 2;
    private int pokercolor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pokercolor {
      get { return pokercolor_; }
      set {
        pokercolor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Poker);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Poker other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Weight != other.Weight) return false;
      if (Pokercolor != other.Pokercolor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Weight != 0) hash ^= Weight.GetHashCode();
      if (Pokercolor != 0) hash ^= Pokercolor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Weight != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Weight);
      }
      if (Pokercolor != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pokercolor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Weight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Weight);
      }
      if (Pokercolor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pokercolor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Poker other) {
      if (other == null) {
        return;
      }
      if (other.Weight != 0) {
        Weight = other.Weight;
      }
      if (other.Pokercolor != 0) {
        Pokercolor = other.Pokercolor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Weight = input.ReadInt32();
            break;
          }
          case 16: {
            Pokercolor = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo> {
    private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SoketDoudizhuProtocol.SoketDoudizhuProtocolReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo(PlayerInfo other) : this() {
      username_ = other.username_;
      coin_ = other.coin_;
      status_ = other.status_;
      poker_ = other.poker_.Clone();
      curpokernum_ = other.curpokernum_;
      roomid_ = other.roomid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo Clone() {
      return new PlayerInfo(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    /// <summary>
    ///用户名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "coin" field.</summary>
    public const int CoinFieldNumber = 2;
    private string coin_ = "";
    /// <summary>
    ///金币数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Coin {
      get { return coin_; }
      set {
        coin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private int status_;
    /// <summary>
    ///状态码：0表示离线，1表示空闲，2表示准备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "poker" field.</summary>
    public const int PokerFieldNumber = 4;
    private static readonly pb::FieldCodec<global::SoketDoudizhuProtocol.Poker> _repeated_poker_codec
        = pb::FieldCodec.ForMessage(34, global::SoketDoudizhuProtocol.Poker.Parser);
    private readonly pbc::RepeatedField<global::SoketDoudizhuProtocol.Poker> poker_ = new pbc::RepeatedField<global::SoketDoudizhuProtocol.Poker>();
    /// <summary>
    ///拥有的牌组
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SoketDoudizhuProtocol.Poker> Poker {
      get { return poker_; }
    }

    /// <summary>Field number for the "curpokernum" field.</summary>
    public const int CurpokernumFieldNumber = 5;
    private int curpokernum_;
    /// <summary>
    ///当前拥有的扑克数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Curpokernum {
      get { return curpokernum_; }
      set {
        curpokernum_ = value;
      }
    }

    /// <summary>Field number for the "roomid" field.</summary>
    public const int RoomidFieldNumber = 6;
    private string roomid_ = "";
    /// <summary>
    ///玩家所在当前房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Roomid {
      get { return roomid_; }
      set {
        roomid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (Coin != other.Coin) return false;
      if (Status != other.Status) return false;
      if(!poker_.Equals(other.poker_)) return false;
      if (Curpokernum != other.Curpokernum) return false;
      if (Roomid != other.Roomid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Coin.Length != 0) hash ^= Coin.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= poker_.GetHashCode();
      if (Curpokernum != 0) hash ^= Curpokernum.GetHashCode();
      if (Roomid.Length != 0) hash ^= Roomid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (Coin.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Coin);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Status);
      }
      poker_.WriteTo(output, _repeated_poker_codec);
      if (Curpokernum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Curpokernum);
      }
      if (Roomid.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Roomid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Coin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Coin);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      size += poker_.CalculateSize(_repeated_poker_codec);
      if (Curpokernum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Curpokernum);
      }
      if (Roomid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Roomid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Coin.Length != 0) {
        Coin = other.Coin;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      poker_.Add(other.poker_);
      if (other.Curpokernum != 0) {
        Curpokernum = other.Curpokernum;
      }
      if (other.Roomid.Length != 0) {
        Roomid = other.Roomid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            Coin = input.ReadString();
            break;
          }
          case 24: {
            Status = input.ReadInt32();
            break;
          }
          case 34: {
            poker_.AddEntriesFrom(input, _repeated_poker_codec);
            break;
          }
          case 40: {
            Curpokernum = input.ReadInt32();
            break;
          }
          case 50: {
            Roomid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家出牌信息
  /// </summary>
  public sealed partial class SendPokersInfo : pb::IMessage<SendPokersInfo> {
    private static readonly pb::MessageParser<SendPokersInfo> _parser = new pb::MessageParser<SendPokersInfo>(() => new SendPokersInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendPokersInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SoketDoudizhuProtocol.SoketDoudizhuProtocolReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendPokersInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendPokersInfo(SendPokersInfo other) : this() {
      poker_ = other.poker_.Clone();
      pokerTypeUtils_ = other.pokerTypeUtils_;
      username_ = other.username_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendPokersInfo Clone() {
      return new SendPokersInfo(this);
    }

    /// <summary>Field number for the "poker" field.</summary>
    public const int PokerFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SoketDoudizhuProtocol.Poker> _repeated_poker_codec
        = pb::FieldCodec.ForMessage(10, global::SoketDoudizhuProtocol.Poker.Parser);
    private readonly pbc::RepeatedField<global::SoketDoudizhuProtocol.Poker> poker_ = new pbc::RepeatedField<global::SoketDoudizhuProtocol.Poker>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SoketDoudizhuProtocol.Poker> Poker {
      get { return poker_; }
    }

    /// <summary>Field number for the "pokerTypeUtils" field.</summary>
    public const int PokerTypeUtilsFieldNumber = 2;
    private int pokerTypeUtils_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PokerTypeUtils {
      get { return pokerTypeUtils_; }
      set {
        pokerTypeUtils_ = value;
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 3;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendPokersInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendPokersInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!poker_.Equals(other.poker_)) return false;
      if (PokerTypeUtils != other.PokerTypeUtils) return false;
      if (Username != other.Username) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= poker_.GetHashCode();
      if (PokerTypeUtils != 0) hash ^= PokerTypeUtils.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      poker_.WriteTo(output, _repeated_poker_codec);
      if (PokerTypeUtils != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PokerTypeUtils);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Username);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += poker_.CalculateSize(_repeated_poker_codec);
      if (PokerTypeUtils != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PokerTypeUtils);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendPokersInfo other) {
      if (other == null) {
        return;
      }
      poker_.Add(other.poker_);
      if (other.PokerTypeUtils != 0) {
        PokerTypeUtils = other.PokerTypeUtils;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            poker_.AddEntriesFrom(input, _repeated_poker_codec);
            break;
          }
          case 16: {
            PokerTypeUtils = input.ReadInt32();
            break;
          }
          case 26: {
            Username = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomInfo : pb::IMessage<RoomInfo> {
    private static readonly pb::MessageParser<RoomInfo> _parser = new pb::MessageParser<RoomInfo>(() => new RoomInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SoketDoudizhuProtocol.SoketDoudizhuProtocolReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo(RoomInfo other) : this() {
      landlord_ = other.landlord_;
      playernum_ = other.playernum_;
      roomtile_ = other.roomtile_;
      status_ = other.status_;
      roomid_ = other.roomid_;
      playerinfo_ = other.playerinfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo Clone() {
      return new RoomInfo(this);
    }

    /// <summary>Field number for the "landlord" field.</summary>
    public const int LandlordFieldNumber = 1;
    private string landlord_ = "";
    /// <summary>
    ///房主
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Landlord {
      get { return landlord_; }
      set {
        landlord_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "playernum" field.</summary>
    public const int PlayernumFieldNumber = 2;
    private int playernum_;
    /// <summary>
    ///人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Playernum {
      get { return playernum_; }
      set {
        playernum_ = value;
      }
    }

    /// <summary>Field number for the "roomtile" field.</summary>
    public const int RoomtileFieldNumber = 3;
    private string roomtile_ = "";
    /// <summary>
    ///房间标题
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Roomtile {
      get { return roomtile_; }
      set {
        roomtile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private int status_;
    /// <summary>
    ///房间状态：0房间不存在，1房间可加入，2房间已满，3房间已经开始游戏
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "roomid" field.</summary>
    public const int RoomidFieldNumber = 5;
    private string roomid_ = "";
    /// <summary>
    ///房间id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Roomid {
      get { return roomid_; }
      set {
        roomid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "playerinfo" field.</summary>
    public const int PlayerinfoFieldNumber = 6;
    private static readonly pb::FieldCodec<global::SoketDoudizhuProtocol.PlayerInfo> _repeated_playerinfo_codec
        = pb::FieldCodec.ForMessage(50, global::SoketDoudizhuProtocol.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::SoketDoudizhuProtocol.PlayerInfo> playerinfo_ = new pbc::RepeatedField<global::SoketDoudizhuProtocol.PlayerInfo>();
    /// <summary>
    ///房间内玩家信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SoketDoudizhuProtocol.PlayerInfo> Playerinfo {
      get { return playerinfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Landlord != other.Landlord) return false;
      if (Playernum != other.Playernum) return false;
      if (Roomtile != other.Roomtile) return false;
      if (Status != other.Status) return false;
      if (Roomid != other.Roomid) return false;
      if(!playerinfo_.Equals(other.playerinfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Landlord.Length != 0) hash ^= Landlord.GetHashCode();
      if (Playernum != 0) hash ^= Playernum.GetHashCode();
      if (Roomtile.Length != 0) hash ^= Roomtile.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Roomid.Length != 0) hash ^= Roomid.GetHashCode();
      hash ^= playerinfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Landlord.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Landlord);
      }
      if (Playernum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Playernum);
      }
      if (Roomtile.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Roomtile);
      }
      if (Status != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Status);
      }
      if (Roomid.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Roomid);
      }
      playerinfo_.WriteTo(output, _repeated_playerinfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Landlord.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Landlord);
      }
      if (Playernum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Playernum);
      }
      if (Roomtile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Roomtile);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Roomid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Roomid);
      }
      size += playerinfo_.CalculateSize(_repeated_playerinfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomInfo other) {
      if (other == null) {
        return;
      }
      if (other.Landlord.Length != 0) {
        Landlord = other.Landlord;
      }
      if (other.Playernum != 0) {
        Playernum = other.Playernum;
      }
      if (other.Roomtile.Length != 0) {
        Roomtile = other.Roomtile;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Roomid.Length != 0) {
        Roomid = other.Roomid;
      }
      playerinfo_.Add(other.playerinfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Landlord = input.ReadString();
            break;
          }
          case 16: {
            Playernum = input.ReadInt32();
            break;
          }
          case 26: {
            Roomtile = input.ReadString();
            break;
          }
          case 32: {
            Status = input.ReadInt32();
            break;
          }
          case 42: {
            Roomid = input.ReadString();
            break;
          }
          case 50: {
            playerinfo_.AddEntriesFrom(input, _repeated_playerinfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameInfo : pb::IMessage<GameInfo> {
    private static readonly pb::MessageParser<GameInfo> _parser = new pb::MessageParser<GameInfo>(() => new GameInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SoketDoudizhuProtocol.SoketDoudizhuProtocolReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameInfo(GameInfo other) : this() {
      status_ = other.status_;
      curusername_ = other.curusername_;
      playertimes_ = other.playertimes_;
      times_ = other.times_;
      playerinfo_ = other.playerinfo_.Clone();
      dizhu_ = other.dizhu_;
      dizhupoker_ = other.dizhupoker_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameInfo Clone() {
      return new GameInfo(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///1表示游戏开始，2表示游戏在抢地主阶段，3表示游戏中，4表示游戏失败，5表示游戏胜利
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "curusername" field.</summary>
    public const int CurusernameFieldNumber = 2;
    private string curusername_ = "";
    /// <summary>
    ///当前回合出牌的玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Curusername {
      get { return curusername_; }
      set {
        curusername_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "playertimes" field.</summary>
    public const int PlayertimesFieldNumber = 3;
    private int playertimes_;
    /// <summary>
    ///当前回合玩家所拥有的操作时间单位秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Playertimes {
      get { return playertimes_; }
      set {
        playertimes_ = value;
      }
    }

    /// <summary>Field number for the "times" field.</summary>
    public const int TimesFieldNumber = 4;
    private int times_;
    /// <summary>
    ///此局游戏进行的时间单位秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Times {
      get { return times_; }
      set {
        times_ = value;
      }
    }

    /// <summary>Field number for the "playerinfo" field.</summary>
    public const int PlayerinfoFieldNumber = 6;
    private static readonly pb::FieldCodec<global::SoketDoudizhuProtocol.PlayerInfo> _repeated_playerinfo_codec
        = pb::FieldCodec.ForMessage(50, global::SoketDoudizhuProtocol.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::SoketDoudizhuProtocol.PlayerInfo> playerinfo_ = new pbc::RepeatedField<global::SoketDoudizhuProtocol.PlayerInfo>();
    /// <summary>
    ///游戏内玩家信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SoketDoudizhuProtocol.PlayerInfo> Playerinfo {
      get { return playerinfo_; }
    }

    /// <summary>Field number for the "dizhu" field.</summary>
    public const int DizhuFieldNumber = 7;
    private string dizhu_ = "";
    /// <summary>
    ///这局游戏地主玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Dizhu {
      get { return dizhu_; }
      set {
        dizhu_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dizhupoker" field.</summary>
    public const int DizhupokerFieldNumber = 8;
    private static readonly pb::FieldCodec<global::SoketDoudizhuProtocol.Poker> _repeated_dizhupoker_codec
        = pb::FieldCodec.ForMessage(66, global::SoketDoudizhuProtocol.Poker.Parser);
    private readonly pbc::RepeatedField<global::SoketDoudizhuProtocol.Poker> dizhupoker_ = new pbc::RepeatedField<global::SoketDoudizhuProtocol.Poker>();
    /// <summary>
    ///地主牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SoketDoudizhuProtocol.Poker> Dizhupoker {
      get { return dizhupoker_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (Curusername != other.Curusername) return false;
      if (Playertimes != other.Playertimes) return false;
      if (Times != other.Times) return false;
      if(!playerinfo_.Equals(other.playerinfo_)) return false;
      if (Dizhu != other.Dizhu) return false;
      if(!dizhupoker_.Equals(other.dizhupoker_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Curusername.Length != 0) hash ^= Curusername.GetHashCode();
      if (Playertimes != 0) hash ^= Playertimes.GetHashCode();
      if (Times != 0) hash ^= Times.GetHashCode();
      hash ^= playerinfo_.GetHashCode();
      if (Dizhu.Length != 0) hash ^= Dizhu.GetHashCode();
      hash ^= dizhupoker_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (Curusername.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Curusername);
      }
      if (Playertimes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Playertimes);
      }
      if (Times != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Times);
      }
      playerinfo_.WriteTo(output, _repeated_playerinfo_codec);
      if (Dizhu.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Dizhu);
      }
      dizhupoker_.WriteTo(output, _repeated_dizhupoker_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Curusername.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Curusername);
      }
      if (Playertimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Playertimes);
      }
      if (Times != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Times);
      }
      size += playerinfo_.CalculateSize(_repeated_playerinfo_codec);
      if (Dizhu.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Dizhu);
      }
      size += dizhupoker_.CalculateSize(_repeated_dizhupoker_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameInfo other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Curusername.Length != 0) {
        Curusername = other.Curusername;
      }
      if (other.Playertimes != 0) {
        Playertimes = other.Playertimes;
      }
      if (other.Times != 0) {
        Times = other.Times;
      }
      playerinfo_.Add(other.playerinfo_);
      if (other.Dizhu.Length != 0) {
        Dizhu = other.Dizhu;
      }
      dizhupoker_.Add(other.dizhupoker_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            Curusername = input.ReadString();
            break;
          }
          case 24: {
            Playertimes = input.ReadInt32();
            break;
          }
          case 32: {
            Times = input.ReadInt32();
            break;
          }
          case 50: {
            playerinfo_.AddEntriesFrom(input, _repeated_playerinfo_codec);
            break;
          }
          case 58: {
            Dizhu = input.ReadString();
            break;
          }
          case 66: {
            dizhupoker_.AddEntriesFrom(input, _repeated_dizhupoker_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MainPack : pb::IMessage<MainPack> {
    private static readonly pb::MessageParser<MainPack> _parser = new pb::MessageParser<MainPack>(() => new MainPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MainPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SoketDoudizhuProtocol.SoketDoudizhuProtocolReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainPack(MainPack other) : this() {
      requestcode_ = other.requestcode_;
      actioncode_ = other.actioncode_;
      returncode_ = other.returncode_;
      loginpack_ = other.loginpack_ != null ? other.loginpack_.Clone() : null;
      roominfo_ = other.roominfo_.Clone();
      playerinfo_ = other.playerinfo_.Clone();
      gameinfo_ = other.gameinfo_ != null ? other.gameinfo_.Clone() : null;
      sendpokersinfo_ = other.sendpokersinfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainPack Clone() {
      return new MainPack(this);
    }

    /// <summary>Field number for the "requestcode" field.</summary>
    public const int RequestcodeFieldNumber = 1;
    private global::SoketDoudizhuProtocol.RequestCode requestcode_ = global::SoketDoudizhuProtocol.RequestCode.RequestNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SoketDoudizhuProtocol.RequestCode Requestcode {
      get { return requestcode_; }
      set {
        requestcode_ = value;
      }
    }

    /// <summary>Field number for the "actioncode" field.</summary>
    public const int ActioncodeFieldNumber = 2;
    private global::SoketDoudizhuProtocol.ActionCode actioncode_ = global::SoketDoudizhuProtocol.ActionCode.ActionNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SoketDoudizhuProtocol.ActionCode Actioncode {
      get { return actioncode_; }
      set {
        actioncode_ = value;
      }
    }

    /// <summary>Field number for the "returncode" field.</summary>
    public const int ReturncodeFieldNumber = 3;
    private global::SoketDoudizhuProtocol.ReturnCode returncode_ = global::SoketDoudizhuProtocol.ReturnCode.ReturnNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SoketDoudizhuProtocol.ReturnCode Returncode {
      get { return returncode_; }
      set {
        returncode_ = value;
      }
    }

    /// <summary>Field number for the "loginpack" field.</summary>
    public const int LoginpackFieldNumber = 4;
    private global::SoketDoudizhuProtocol.LoginPack loginpack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SoketDoudizhuProtocol.LoginPack Loginpack {
      get { return loginpack_; }
      set {
        loginpack_ = value;
      }
    }

    /// <summary>Field number for the "roominfo" field.</summary>
    public const int RoominfoFieldNumber = 5;
    private static readonly pb::FieldCodec<global::SoketDoudizhuProtocol.RoomInfo> _repeated_roominfo_codec
        = pb::FieldCodec.ForMessage(42, global::SoketDoudizhuProtocol.RoomInfo.Parser);
    private readonly pbc::RepeatedField<global::SoketDoudizhuProtocol.RoomInfo> roominfo_ = new pbc::RepeatedField<global::SoketDoudizhuProtocol.RoomInfo>();
    /// <summary>
    ///房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SoketDoudizhuProtocol.RoomInfo> Roominfo {
      get { return roominfo_; }
    }

    /// <summary>Field number for the "playerinfo" field.</summary>
    public const int PlayerinfoFieldNumber = 6;
    private static readonly pb::FieldCodec<global::SoketDoudizhuProtocol.PlayerInfo> _repeated_playerinfo_codec
        = pb::FieldCodec.ForMessage(50, global::SoketDoudizhuProtocol.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::SoketDoudizhuProtocol.PlayerInfo> playerinfo_ = new pbc::RepeatedField<global::SoketDoudizhuProtocol.PlayerInfo>();
    /// <summary>
    ///玩家信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SoketDoudizhuProtocol.PlayerInfo> Playerinfo {
      get { return playerinfo_; }
    }

    /// <summary>Field number for the "gameinfo" field.</summary>
    public const int GameinfoFieldNumber = 7;
    private global::SoketDoudizhuProtocol.GameInfo gameinfo_;
    /// <summary>
    ///游戏信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SoketDoudizhuProtocol.GameInfo Gameinfo {
      get { return gameinfo_; }
      set {
        gameinfo_ = value;
      }
    }

    /// <summary>Field number for the "sendpokersinfo" field.</summary>
    public const int SendpokersinfoFieldNumber = 8;
    private static readonly pb::FieldCodec<global::SoketDoudizhuProtocol.SendPokersInfo> _repeated_sendpokersinfo_codec
        = pb::FieldCodec.ForMessage(66, global::SoketDoudizhuProtocol.SendPokersInfo.Parser);
    private readonly pbc::RepeatedField<global::SoketDoudizhuProtocol.SendPokersInfo> sendpokersinfo_ = new pbc::RepeatedField<global::SoketDoudizhuProtocol.SendPokersInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SoketDoudizhuProtocol.SendPokersInfo> Sendpokersinfo {
      get { return sendpokersinfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MainPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MainPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Requestcode != other.Requestcode) return false;
      if (Actioncode != other.Actioncode) return false;
      if (Returncode != other.Returncode) return false;
      if (!object.Equals(Loginpack, other.Loginpack)) return false;
      if(!roominfo_.Equals(other.roominfo_)) return false;
      if(!playerinfo_.Equals(other.playerinfo_)) return false;
      if (!object.Equals(Gameinfo, other.Gameinfo)) return false;
      if(!sendpokersinfo_.Equals(other.sendpokersinfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Requestcode != global::SoketDoudizhuProtocol.RequestCode.RequestNone) hash ^= Requestcode.GetHashCode();
      if (Actioncode != global::SoketDoudizhuProtocol.ActionCode.ActionNone) hash ^= Actioncode.GetHashCode();
      if (Returncode != global::SoketDoudizhuProtocol.ReturnCode.ReturnNone) hash ^= Returncode.GetHashCode();
      if (loginpack_ != null) hash ^= Loginpack.GetHashCode();
      hash ^= roominfo_.GetHashCode();
      hash ^= playerinfo_.GetHashCode();
      if (gameinfo_ != null) hash ^= Gameinfo.GetHashCode();
      hash ^= sendpokersinfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Requestcode != global::SoketDoudizhuProtocol.RequestCode.RequestNone) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Requestcode);
      }
      if (Actioncode != global::SoketDoudizhuProtocol.ActionCode.ActionNone) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Actioncode);
      }
      if (Returncode != global::SoketDoudizhuProtocol.ReturnCode.ReturnNone) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Returncode);
      }
      if (loginpack_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Loginpack);
      }
      roominfo_.WriteTo(output, _repeated_roominfo_codec);
      playerinfo_.WriteTo(output, _repeated_playerinfo_codec);
      if (gameinfo_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Gameinfo);
      }
      sendpokersinfo_.WriteTo(output, _repeated_sendpokersinfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Requestcode != global::SoketDoudizhuProtocol.RequestCode.RequestNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Requestcode);
      }
      if (Actioncode != global::SoketDoudizhuProtocol.ActionCode.ActionNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Actioncode);
      }
      if (Returncode != global::SoketDoudizhuProtocol.ReturnCode.ReturnNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Returncode);
      }
      if (loginpack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Loginpack);
      }
      size += roominfo_.CalculateSize(_repeated_roominfo_codec);
      size += playerinfo_.CalculateSize(_repeated_playerinfo_codec);
      if (gameinfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gameinfo);
      }
      size += sendpokersinfo_.CalculateSize(_repeated_sendpokersinfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MainPack other) {
      if (other == null) {
        return;
      }
      if (other.Requestcode != global::SoketDoudizhuProtocol.RequestCode.RequestNone) {
        Requestcode = other.Requestcode;
      }
      if (other.Actioncode != global::SoketDoudizhuProtocol.ActionCode.ActionNone) {
        Actioncode = other.Actioncode;
      }
      if (other.Returncode != global::SoketDoudizhuProtocol.ReturnCode.ReturnNone) {
        Returncode = other.Returncode;
      }
      if (other.loginpack_ != null) {
        if (loginpack_ == null) {
          Loginpack = new global::SoketDoudizhuProtocol.LoginPack();
        }
        Loginpack.MergeFrom(other.Loginpack);
      }
      roominfo_.Add(other.roominfo_);
      playerinfo_.Add(other.playerinfo_);
      if (other.gameinfo_ != null) {
        if (gameinfo_ == null) {
          Gameinfo = new global::SoketDoudizhuProtocol.GameInfo();
        }
        Gameinfo.MergeFrom(other.Gameinfo);
      }
      sendpokersinfo_.Add(other.sendpokersinfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Requestcode = (global::SoketDoudizhuProtocol.RequestCode) input.ReadEnum();
            break;
          }
          case 16: {
            Actioncode = (global::SoketDoudizhuProtocol.ActionCode) input.ReadEnum();
            break;
          }
          case 24: {
            Returncode = (global::SoketDoudizhuProtocol.ReturnCode) input.ReadEnum();
            break;
          }
          case 34: {
            if (loginpack_ == null) {
              Loginpack = new global::SoketDoudizhuProtocol.LoginPack();
            }
            input.ReadMessage(Loginpack);
            break;
          }
          case 42: {
            roominfo_.AddEntriesFrom(input, _repeated_roominfo_codec);
            break;
          }
          case 50: {
            playerinfo_.AddEntriesFrom(input, _repeated_playerinfo_codec);
            break;
          }
          case 58: {
            if (gameinfo_ == null) {
              Gameinfo = new global::SoketDoudizhuProtocol.GameInfo();
            }
            input.ReadMessage(Gameinfo);
            break;
          }
          case 66: {
            sendpokersinfo_.AddEntriesFrom(input, _repeated_sendpokersinfo_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
